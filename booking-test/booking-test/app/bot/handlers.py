from aiogram import types,Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import main_menu_keyboard, admin_menu_keyboard, generate_date_keyboard, generate_time_keyboard, generate_hour_keyboard, generate_minute_keyboard
from utils import get_user_role
from database import get_cursor, commit, reset_transaction 



class BookingState(StatesGroup):
    awaiting_name = State()
    awaiting_company = State()

async def check_membership(user_id: int, message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã"""
    # Get the user's role (admin, owner, member)
    role = await get_user_role(message.bot, user_id)

    # Allow all roles (member, admin, owner) to interact with the bot
    if role == "unknown":
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –≥—Ä—É–ø–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return False
    if role in {"member", "admin", "owner"}:
        return True

    await message.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
    return False

async def show_main_menu(message: Message, name: str, bot):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not await check_membership(message.from_user.id, message):
        return
    role = await get_user_role(bot, message.from_user.id)
    is_admin = role in {"admin", "owner"}
    reset_transaction()
    cursor = get_cursor()
    cursor.execute("SELECT start_datetime FROM public.bookings WHERE user_id = %s", (message.from_user.id,))
    bookings = cursor.fetchall()

    has_bookings = len(bookings) > 0

    await message.answer(f"üéâ {name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!", reply_markup=main_menu_keyboard(is_admin, has_bookings))

async def start_command(message: Message, state: FSMContext, bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ"""
    user_id = message.from_user.id
    if not await check_membership(user_id, message):
        return
    reset_transaction()
    cursor = get_cursor()
    cursor.execute("SELECT first_name, company FROM public.users WHERE tg_id = %s", (user_id,))
    user = cursor.fetchone()

    if not user or not user[0]:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(BookingState.awaiting_name)
    elif not user[1]:
        await message.answer("‚úÖ –ò–º—è —É–∂–µ –µ—Å—Ç—å! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
        await state.set_state(BookingState.awaiting_company)
    else:
        await show_main_menu(message, user[0], bot)

async def ask_name(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ"""
    user_id = message.from_user.id
    if not await check_membership(user_id, message):
        return

    first_name = message.text.strip()
    if len(first_name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    reset_transaction()
    cursor = get_cursor()
    cursor.execute("INSERT INTO users (tg_id, first_name) VALUES (%s, %s) ON CONFLICT(tg_id) DO UPDATE SET first_name = excluded.first_name;", (user_id, first_name))
    commit()

    await message.answer("‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(BookingState.awaiting_company)

async def ask_company(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    if not await check_membership(user_id, message):
        return

    company = message.text.strip()
    if len(company) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    reset_transaction()
    cursor = get_cursor()
    cursor.execute("UPDATE users SET company = %s WHERE tg_id = %s", (company, user_id))
    commit()

    cursor.execute("SELECT first_name FROM public.users WHERE tg_id = %s", (user_id,))
    first_name = cursor.fetchone()
    
    if first_name:
        await state.clear()
        await show_main_menu(message, first_name[0], bot=message.bot)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



async def book_appointment(message: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã"""
    if not await check_membership(message.from_user.id, message):
        return
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=generate_date_keyboard("date"))


async def select_date(callback: CallbackQuery):
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è"""
    if not await check_membership(callback.from_user.id, callback.message):
        return
    date = callback.data.split(":")[1]
    await callback.message.edit_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date}:", reply_markup=generate_hour_keyboard(date))



#def generate_hour_keyboard(date):
#    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
#    keyboard = [
#        [InlineKeyboardButton(text=f"üïí {hour}:00", callback_data=f"time:{date} {hour}:00")]
#        for hour in range(9, 18)  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å 9:00 –¥–æ 17:00
#    ]
#    return InlineKeyboardMarkup(inline_keyboard=keyboard)
#
#def generate_minute_keyboard(date, hour):
#    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç"""
#    keyboard = InlineKeyboardMarkup(row_width=3)
#    for minute in range(0, 60, 10):
#        keyboard.insert(InlineKeyboardButton(text=f"{hour}:{minute:02d}", callback_data=f"minute_{date}_{hour}_{minute}"))
#    return keyboard
#
#
async def process_hour_selection(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞"""
    parts = callback_query.data.split("_")
    if len(parts) != 3:
        return await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")

    _, date, hour = parts

    await callback_query.message.edit_text(
        f"‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –¥–ª—è {date} {hour}:00:",
        reply_markup=generate_minute_keyboard(date, hour)
    )

async def process_minute_selection(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    parts = callback_query.data.split("_")
    if len(parts) != 4:
        return await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")

    _, date, hour, minute = parts
    start_time = f"{date} {hour}:{minute}"
    end_time = f"{date} {int(hour) + 1}:{minute}"

    try:
        reset_transaction()
        cursor = get_cursor()
        cursor.execute("INSERT INTO public.bookings (user_id, start_datetime, end_datetime, status) VALUES (%s, %s, %s, %s)",
               (callback_query.from_user.id, start_time, end_time, 'active'))  # –ò–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        commit()

        await callback_query.message.edit_text(
            f"‚úÖ –ë—Ä–æ–Ω—å —Å {hour}:{minute} –¥–æ {int(hour) + 1}:{minute} —Å–æ–∑–¥–∞–Ω–∞! üéâ"
        )
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

#async def process_hour_selection(callback_query: CallbackQuery):
#    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞"""
#    parts = callback_query.data.split("_")
#    if len(parts) != 3:
#        return await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
#
#    _, date, hour = parts
#
#    await callback_query.message.edit_text(
#        f"‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –¥–ª—è {date} {hour}:00:",
#        reply_markup=generate_minute_keyboard(date, hour)
#    )
#
#async def process_minute_selection(callback_query: CallbackQuery):
#    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
#    parts = callback_query.data.split("_")
#    if len(parts) != 4:
#        return await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")
#
#    _, date, hour, minute = parts
#    start_time = f"{date} {hour}:{minute}:00"
#    end_time = f"{date} {int(hour) + 1}:{minute}:00"
#
#    try:
#        reset_transaction()
#        cursor = get_cursor()
#        cursor.execute("INSERT INTO public.bookings (user_id, start_datetime, end_datetime, status) VALUES (%s, %s, %s, %s)",
#               (callback_query.from_user.id, start_time, end_time, 'active'))  # –ò–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
#        commit()
#        await callback_query.message.edit_text(
#            f"‚úÖ –ë—Ä–æ–Ω—å —Å {hour}:{minute} –¥–æ {int(hour) + 1}:{minute} —Å–æ–∑–¥–∞–Ω–∞! üéâ"
#        )
#
#
#        #await callback_query.message.edit_text(
#        #    f"‚úÖ –ë—Ä–æ–Ω—å —Å {hour}:{minute} –¥–æ {int(hour) + 1}:{minute} —Å–æ–∑–¥–∞–Ω–∞! üéâ"
#        #)
#    except Exception as e:
#        await callback_query.answer(f"–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
#
##async def book_appointment(message: Message):
#    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã"""
#    if not await check_membership(message.from_user.id, message):
#        return
#    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=generate_date_keyboard("date"))
#
#async def select_date(callback: CallbackQuery):
#    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è"""
#    if not await check_membership(callback.from_user.id, callback.message):
#        return
#    date = callback.data.split(":")[1]
#    await callback.message.edit_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date}:", reply_markup=generate_time_keyboard(date))
#
#async def select_time(callback: CallbackQuery):
#    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
#    if not await check_membership(callback.from_user.id, callback.message):
#        return
#    reset_transaction()
#    cursor = get_cursor()
#    user_id = callback.from_user.id
#    booking_time = callback.data.split(":", 1)[1]
#
#    cursor.execute("INSERT INTO bookings (user_id, start_datetime) VALUES (%s, %s)", (user_id, booking_time))
#    commit()
#
#    await callback.message.edit_text(f"‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ {booking_time}! üéâ")

async def my_bookings(message: Message):
    """Shows the user's bookings with cancel options"""
    if not await check_membership(message.from_user.id, message):
        return
    reset_transaction()
    cursor = get_cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT user_id, start_datetime FROM public.bookings WHERE user_id = %s", (user_id,))
    bookings = cursor.fetchall()

    if bookings:
        text = "üìå –í–∞—à–∏ –±—Ä–æ–Ω–∏:\n" + "\n".join([f"üïí {row[1].strftime('%H:%M')}" for row in bookings])
        #text = "üìå –í–∞—à–∏ –±—Ä–æ–Ω–∏:\n" + "\n".join([f"üïí {row[1]}" for row in bookings])
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {row[1]}", callback_data=f"cancel:{row[0]}")]  # Pass the booking ID here
            for row in bookings
        ])
    else:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        keyboard = None  # No buttons if no bookings

    await message.answer(text, reply_markup=keyboard)

async def view_bookings(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã"""
    if not await check_membership(message.from_user.id, message):
        return

    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–µ–π:", reply_markup=generate_date_keyboard("view_broni"))

async def show_bookings_for_date(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    if not await check_membership(callback.from_user.id, callback.message):
        return

    selected_date = callback.data.split(":")[1]
    reset_transaction()
    cursor = get_cursor()
    cursor.execute("""
    SELECT b.start_datetime, u.first_name, u.company 
    FROM public.bookings b 
    JOIN public.users u ON b.user_id = u.tg_id 
    WHERE b.start_datetime::TEXT LIKE %s
    """, (f"{selected_date}%",))

    bookings = cursor.fetchall()

    if bookings:
        text = "üìå –í–∞—à–∏ –±—Ä–æ–Ω–∏:\n" + "\n".join([f"üïí {row[1].strftime('%H:%M')}" for row in bookings])
        #text = f"üìå –ë—Ä–æ–Ω–∏ –Ω–∞ {selected_date}:\n" + "\n".join([f"üïí {start} - üë§ {name} ({company})" for start, name, company in bookings])
    else:
        text = f"‚ùå –ù–∞ {selected_date} –Ω–µ—Ç –∑–∞—è–≤–æ–∫."

    await callback.message.edit_text(text)

async def cancel_booking(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã"""
    if not await check_membership(message.from_user.id, message):
        return
    reset_transaction()
    cursor = get_cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT user_id, start_datetime FROM public.bookings WHERE user_id = %s", (user_id,))
    bookings = cursor.fetchall()

    if not bookings:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {row[1]}", callback_data=f"cancel:{row[0]}")]
        for row in bookings
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)

async def confirm_cancel(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –±—Ä–æ–Ω—å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    if not await check_membership(callback.from_user.id, callback.message):
        return
    reset_transaction()
    booking_id = callback.data.split(":")[1]
    cursor = get_cursor()

    cursor.execute("DELETE FROM public.bookings WHERE user_id = %s", (booking_id,))
    commit()

    await callback.message.edit_text("‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")

async def show_admin_menu(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤"""
    # Check if the user is an admin or the owner
    role = await get_user_role(message.bot, message.from_user.id)
    
    # If the user is an admin or owner, show the admin menu
    if role in ["admin", "owner"]:
        await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é:", reply_markup=admin_menu_keyboard())
    else:
        # Provide more detailed feedback for users without admin rights
        if role == "member":
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –º–µ–Ω—é. –í—ã –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã.")
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")



async def handle_admin_action(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –±—Ä–æ–Ω—å":
        reset_transaction()
        cursor = get_cursor()
        cursor.execute("SELECT start_datetime, user_id FROM public.bookings")
        bookings = cursor.fetchall()

        if not bookings:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {row[1]}", callback_data=f"cancel:{row[0]}")]
            for row in bookings
        ])
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)
    
    elif message.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(message, message.from_user.first_name, message.bot)

async def handle_admin_button_click(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚öôÔ∏è –ê–¥–º–∏–Ω"""
    if message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω":
        await show_admin_menu(message)


def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.message.register(ask_name, BookingState.awaiting_name)
    dp.message.register(ask_company, BookingState.awaiting_company)
    dp.message.register(book_appointment, lambda message: message.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
    dp.callback_query.register(select_date, lambda callback: callback.data.startswith("date:"))
    dp.callback_query.register(process_hour_selection, lambda callback: callback.data.startswith("hour_"))
    dp.callback_query.register(process_minute_selection, lambda callback: callback.data.startswith("minute_"))
    #dp.message.register(book_appointment, lambda message: message.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
    #dp.callback_query.register(select_date, lambda callback: callback.data.startswith("date:"))
    #dp.callback_query.register(select_time, lambda callback: callback.data.startswith("time:"))
    dp.message.register(my_bookings, lambda message: message.text == "üìñ –ú–æ–∏ –±—Ä–æ–Ω–∏")
    dp.message.register(show_admin_menu, lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω")
    dp.message.register(handle_admin_action, lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –±—Ä–æ–Ω—å")
    dp.message.register(handle_admin_action, lambda message: message.text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    dp.message.register(view_bookings, lambda message: message.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏")
    dp.callback_query.register(show_bookings_for_date, lambda callback: callback.data.startswith("view_broni:"))
    dp.message.register(cancel_booking, lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")
    dp.callback_query.register(confirm_cancel, lambda callback: callback.data.startswith("cancel:"))
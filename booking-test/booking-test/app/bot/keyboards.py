from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database import get_cursor, commit, reset_transaction 

def main_menu_keyboard(is_admin=False, has_bookings=False):
    """Generates the main menu with buttons for members and admins"""
    buttons = [
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üìñ –ú–æ–∏ –±—Ä–æ–Ω–∏")],
        [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏")]
    ]
    
    # Members can always see and cancel their own bookings if they have any
    #if has_bookings:
    #    buttons.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å")])  
    
    # Admins and owner see the "‚öôÔ∏è –ê–¥–º–∏–Ω" button
    if is_admin:
        buttons.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω")])
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def generate_date_keyboard(callback_prefix="date"):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)"""
    today = datetime.now().date()
    dates = []
    day = today  

    while len(dates) < 7:
        if day.weekday() < 5:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            dates.append(day.strftime("%Y-%m-%d"))
        day += timedelta(days=1)

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÖ {date}", callback_data=f"{callback_prefix}:{date}")]
        for date in dates
    ])

def generate_hour_keyboard(date: str):
    keyboard = [
        [InlineKeyboardButton(text=f"{hour}:00", callback_data=f"hour_{date}_{hour}")]
        for hour in range(9, 19)  # 09:00 - 18:00
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def generate_minute_keyboard(date: str, hour: str):
    keyboard = [
        [InlineKeyboardButton(text=f"{hour}:{minute:02d}", callback_data=f"minute_{date}_{hour}_{minute}")]
        for minute in range(0, 60, 10)  # –®–∞–≥ 10 –º–∏–Ω—É—Ç
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

#def generate_hour_keyboard(date: str):
#    keyboard = [
#        [InlineKeyboardButton(text=f"{hour}:00", callback_data=f"hour_{date}_{hour}")]
#        for hour in range(9, 19)  # 9:00 to 18:00
#    ]
#    return InlineKeyboardMarkup(inline_keyboard=keyboard)

#def generate_minute_keyboard(date: str, hour: str):
#    keyboard = [
#        [InlineKeyboardButton(text=f"{hour}:{minute:02d}", callback_data=f"minute_{date}_{hour}_{minute}")]
#        for minute in range(0, 60, 10)  # Every 10 minutes
#    ]
#    return InlineKeyboardMarkup(inline_keyboard=keyboard)



def generate_time_keyboard(date):
    reset_transaction()
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    cursor = get_cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    booked_times = {row[0] for row in cursor.execute(
        "SELECT start_datetime FROM public.bookings WHERE start_datetime LIKE %s", (f"{date}%",)
    ).fetchall()}
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    times = [f"{hour}:00" for hour in range(9, 18) if f"{date} {hour}:00" not in booked_times]

    # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã
    if not times:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="no_slots")]
        ])

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚è∞ {time}", callback_data=f"time:{date} {time}")]
        for time in times
    ])
def admin_menu_keyboard():
    """Generates the admin menu."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –±—Ä–æ–Ω—å")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
